{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","baseurl","axios","get","then","response","data","newObject","post","id","put","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"4MAaeA,EAXF,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBACbC,EAAQF,EAAKG,UACf,qBAAuB,iBACzB,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,QCI7BK,EAZM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACrB,OAAe,OAAZA,EACM,KAIP,qBAAKJ,UAAU,QAAf,SACGI,K,gBCLDC,EAAU,aAkBD,EAhBA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAc5B,EAXA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAS5B,EANA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCXrCK,EAAS,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,2GAmFSC,EA9EH,WAAO,IAAD,EAEUC,mBAAS,IAFnB,mBAETC,EAFS,KAEFC,EAFE,OAGcF,mBAAS,IAHvB,mBAGTG,EAHS,KAGAC,EAHA,OAIcJ,oBAAS,GAJvB,mBAITK,EAJS,KAIAC,EAJA,OAKwBN,mBAAS,MALjC,mBAKTO,EALS,KAKKC,EALL,KAOhBC,qBAAU,WACRC,IACGvB,MAAK,SAAAwB,GACJT,EAASS,QAEZ,IAGH,IAsCMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAO,SAAAtC,GAAI,OAAuB,IAAnBA,EAAKG,aAE5B,OACE,gCACE,uCACA,cAAC,EAAD,CAAcK,QAASwB,IACvB,6BACGK,EAAYE,KAAI,SAAAvC,GAAI,OACnB,cAAC,EAAD,CAAoBA,KAAMA,EAAMC,iBAAkB,kBAjCjC,SAACgB,GAC1B,IAAMjB,EAAO0B,EAAMc,MAAK,SAAAxC,GAAI,OAAIA,EAAKiB,KAAOA,KACtCwB,EAAW,2BAAOzC,GAAP,IAAaG,WAAYH,EAAKG,YAE/CgC,EAAmBlB,EAAIwB,GACpB7B,MAAK,SAAA8B,GACJf,EAASD,EAAMa,KAAI,SAAAvC,GAAI,OAAIA,EAAKiB,KAAOA,EAAKjB,EAAO0C,SAEpDC,OAAM,SAAAC,GACLX,EAAgB,SAAD,OACJjC,EAAKK,QADD,sCAGfwC,YAAW,WACTZ,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAAAtC,GAAI,OAAIA,EAAKiB,KAAOA,SAkBkB6B,CAAmB9C,EAAKiB,MAArEjB,EAAKiB,SAGpB,uBAAM8B,SAnDI,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB7C,QAASuB,EACTuB,KAAM,IAAIC,KACVjD,UAAWkD,KAAKC,SAAW,IAG7BnB,EAAmBe,GAChBtC,MAAK,SAAA8B,GACJf,EAASD,EAAM6B,OAAOb,IACtBb,EAAW,QAwCX,UACE,uBAAO2B,MAAO5B,EAAS6B,SAlBN,SAACT,GACxBnB,EAAWmB,EAAMU,OAAOF,UAkBlB,wBAAQG,KAAK,SAAb,qBAEF,8BACE,yBAAQrD,QAAS,kBAAMyB,GAAYD,IAAnC,kBAAmDA,EAAS,YAAc,WAE5E,cAAC,EAAD,Q,MCvFR8B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.5d96cb7a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({note, toggleImportance}) => {\r\n  const label = note.important\r\n    ? 'make not important' : 'make important'\r\n    return (\r\n      <li className='note'>\r\n        {note.content}\r\n        <button onClick={toggleImportance}>{label}</button>\r\n      </li>\r\n    )\r\n}\r\n\r\nexport default Note","const Notification = ({message}) => {\r\n  if(message === null){\r\n    return null\r\n  }\r\n\r\n  return(\r\n    <div className='error'>\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import axios from 'axios'\r\n\r\nconst baseurl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseurl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseurl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseurl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\n// eslint-disable-next-line\r\nexport default { getAll, create, update }","import React, { useEffect, useState } from 'react'\r\nimport Note from './components/Note'\r\nimport Notification from './components/Notification'\r\nimport noteService from './services/notes'\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: 'green',\r\n    fontStyle: 'italic',\r\n    fontSize: 16\r\n  }\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n\r\n  const [notes, setNotes] = useState([])\r\n  const [newNote, setNewNote] = useState('')\r\n  const [showAll, setShowAll] = useState(true)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n  useEffect(() => {\r\n    noteService.getAll()\r\n      .then(initialNotes => {\r\n        setNotes(initialNotes)\r\n      })\r\n  }, [])\r\n\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault()\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date(),\r\n      important: Math.random() < 0.5,\r\n    }\r\n\r\n    noteService.create(noteObject)\r\n      .then(returnedNote => {\r\n        setNotes(notes.concat(returnedNote))\r\n        setNewNote('')\r\n      })   \r\n  }\r\n\r\n  const toggleImportanceOf = (id) => {\r\n    const note = notes.find(note => note.id === id)\r\n    const changedNote = {...note, important: !note.important}\r\n\r\n    noteService.update(id, changedNote)\r\n      .then(returnedNote => {\r\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n      })\r\n      .catch(error => {\r\n        setErrorMessage(\r\n          `Note '${note.content}' was already removed from server`\r\n        )\r\n        setTimeout(() => {\r\n          setErrorMessage(null)\r\n        }, 5000)\r\n        setNotes(notes.filter(note => note.id !== id))\r\n      })\r\n  }\r\n\r\n  const handleNoteChange = (event) => {\r\n    setNewNote(event.target.value)\r\n  }\r\n\r\n  const notesToShow = showAll\r\n    ? notes\r\n    : notes.filter(note => note.important === true) //can be shortened as notes.filter(note => note,important) , since the important is alrdy a boolean value\r\n\r\n    return (\r\n      <div>\r\n        <h1>Notes</h1>\r\n        <Notification message={errorMessage} />\r\n        <ul>\r\n          {notesToShow.map(note => \r\n            <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)} />\r\n          )}\r\n        </ul>\r\n        <form onSubmit={addNote}>\r\n          <input value={newNote} onChange={handleNoteChange} />\r\n          <button type=\"submit\">save</button>\r\n        </form>\r\n        <div>\r\n          <button onClick={() => setShowAll(!showAll)}>show {showAll? 'important' : 'all'}</button>\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n\n"],"sourceRoot":""}